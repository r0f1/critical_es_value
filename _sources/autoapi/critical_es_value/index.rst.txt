critical_es_value
=================

.. py:module:: critical_es_value


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/critical_es_value/corrtest/index
   /autoapi/critical_es_value/linreg/index
   /autoapi/critical_es_value/ttest/index
   /autoapi/critical_es_value/utils/index


Functions
---------

.. autoapisummary::

   critical_es_value.critical_for_correlation_test
   critical_es_value.critical_for_linear_regression
   critical_es_value.critical_for_linear_regression_se_coefficients
   critical_es_value.critical_for_one_sample_ttest
   critical_es_value.critical_for_two_sample_ttest
   critical_es_value.get_alpha
   critical_es_value.get_bias_correction_factor_J


Package Contents
----------------

.. py:function:: critical_for_correlation_test(x: numpy.typing.ArrayLike, y: numpy.typing.ArrayLike, confidence: float = 0.95, alternative: str = 'two-sided', variant: str = 'ttest') -> pandas.DataFrame

   Calculate critical effect size values for a pearson correlation test.

   :param x: Sample data for group 1.
   :type x: ArrayLike
   :param y: Sample data for group 2.
   :type y: ArrayLike
   :param confidence: Confidence level between 0 and 1 (exclusive). Default is 0.95.
   :type confidence: float
   :param alternative: The alternative hypothesis. Either "two-sided", "greater", or "less". Default is "two-sided".
   :type alternative: str
   :param variant: The statistical test variant. Either "ttest" or "ztest". Default is "ttest".
   :type variant: str

   :returns:

             A DataFrame with the following columns:
                 - `r`: Pearson correlation coefficient
                 - `n`: Sample size
                 - `dof`: Degrees of freedom
                 - `r_critical`: Critical value for the correlation coefficient
                 - `rz_critical`: Critical value for Fisher's z-transformed correlation coefficient (only for "ztest" variant)
                 - `se_r`: Standard error of the correlation coefficient
                 - `se_r_critical`: Standard error of the critical correlation coefficient
                 - `se_rz_critical`: Standard error of the critical Fisher's z-transformed correlation coefficient (only for "ztest" variant)
   :rtype: pd.DataFrame

   :raises ValueError: If `variant` is not one of "ttest" or "ztest".


.. py:function:: critical_for_linear_regression(X: pandas.DataFrame, y: pandas.Series, alternative: str = 'two-sided', confidence: float = 0.95, variant: str = 'ttest', **kwargs)

   Calculate critical effect size values for linear regression coefficients.

   :param X: DataFrame containing the independent variables.
   :type X: pd.DataFrame
   :param y: Series containing the dependent variable.
   :type y: pd.Series
   :param alternative: The alternative hypothesis. Either "two-sided", "greater", or "less". Default is "two-sided".
   :type alternative: str
   :param confidence: Confidence level between 0 and 1 (exclusive). Default is 0.95.
   :type confidence: float
   :param variant: The statistical test variant. Either "ttest" or "ztest". Default is "ttest".
   :type variant: str
   :param \*\*kwargs: Additional keyword arguments to pass to pingouin.linear_regression.

   :returns:

             Returns a DataFrame with the following columns:
                 - `names`: Names of the regression coefficients
                 - `coef`: Estimated regression coefficients
                 - `coef_critical`: Critical value for the regression coefficients
   :rtype: pd.DataFrame

   :raises ValueError: If variant is not one of "ttest" or "ztest".


.. py:function:: critical_for_linear_regression_se_coefficients(se_coefficients: numpy.typing.ArrayLike, dof: int, alternative: str = 'two-sided', confidence: float = 0.95, variant: str = 'ttest') -> list[float]

   Calculate critical effect size values for linear regression coefficients.

   :param se_coefficients: Standard errors of the regression coefficients.
   :type se_coefficients: ArrayLike
   :param dof: Degrees of freedom of the model residuals.
   :type dof: int
   :param alternative: The alternative hypothesis. Either "two-sided", "greater", or "less". Default is "two-sided".
   :type alternative: str
   :param confidence: Confidence level between 0 and 1 (exclusive). Default is 0.95.
   :type confidence: float
   :param variant: The statistical test variant. Either "ttest" or "ztest". Default is "ttest".
   :type variant: str

   :returns: An array containing critical effect size values for each coefficient.
   :rtype: np.ndarray

   :raises ValueError: If variant is not one of "ttest" or "ztest".


.. py:function:: critical_for_one_sample_ttest(x: numpy.typing.ArrayLike, alternative: str = 'two-sided', confidence: float = 0.95) -> pandas.DataFrame

   Calculate critical effect size values for a one-sample t-test.

   :param x: Sample data.
   :type x: ArrayLike
   :param alternative: The alternative hypothesis. Either "two-sided", "greater", or "less". Default is "two-sided".
   :type alternative: str
   :param confidence: Confidence level between 0 and 1 (exclusive). Default is 0.95.
   :type confidence: float

   :returns:

             Returns a DataFrame with the following columns:
                 - `T`: t-value of the test statistic
                 - `dof`: Degrees of freedom
                 - `T_critical`: Critical t-value
                 - `d`: Cohen's d
                 - `d_critical`: Critical value for Cohen's d
                 - `b_critical`: Critical value for the raw mean difference
                 - `g`: Hedges' g
                 - `g_critical`: Critical value for Hedges' g
   :rtype: pd.DataFrame


.. py:function:: critical_for_two_sample_ttest(x: numpy.typing.ArrayLike, y: numpy.typing.ArrayLike, paired: bool = False, correction: Union[bool, str] = 'auto', alternative: str = 'two-sided', confidence: float = 0.95) -> pandas.DataFrame

   Calculate critical effect size values for a paired or an unpaired two-sample t-test.

   :param x: Sample data for group 1.
   :type x: ArrayLike
   :param y: Sample data for group 2.
   :type y: ArrayLike
   :param paired: Whether the samples are paired. Default is False.
   :type paired: bool
   :param correction: For unpaired two sample T-tests, specify whether or not to correct for unequal variances
                      using Welch separate variances T-test. If "auto", it will automatically uses Welch T-test when the sample
                      sizes are unequal. For paired T-tests, this parameter is ignored and no correction is performed. Default
                      is "auto".
   :type correction: bool
   :param alternative: The alternative hypothesis. Either "two-sided", "greater", or "less". Default is "two-sided".
   :type alternative: str
   :param confidence: Confidence level between 0 and 1 (exclusive). Default is 0.95.
   :type confidence: float

   :returns:

             Returns a DataFrame with the following columns:
                - `T`: t-value of the test statistic
                - `dof`: Degrees of freedom
                - `T_critical`: Critical t-value
                - `d`: Cohen's d
                - `d_critical`: Critical value for Cohen's d
                - `b_critical`: Critical value for the raw mean difference
                - `g`: Hedges' g
                - `g_critical`: Critical value for Hedges' g
   :rtype: pd.DataFrame


.. py:function:: get_alpha(confidence: float, alternative: str) -> float

   Calculate the significance level (alpha) corresponding to a given confidence level.

   .. math::

       \alpha = \begin{cases}
           1 - \text{conf} & \text{one-sided} \\
           \frac{1 - \text{conf}}{2} & \text{two-sided}
       \end{cases}

   :param confidence: Confidence level between 0 and 1 (exclusive).
   :type confidence: float
   :param alternative: The alternative hypothesis. Either "two-sided", "greater", or "less".
   :type alternative: str

   :returns: The significance level (alpha).
   :rtype: float

   :raises ValueError: If `confidence` is not in (0, 1)
   :raises ValueError: If `alternative` is not one of "two-sided", "greater", or "less".

   .. rubric:: Examples

   >>> get_alpha(0.95, "two-sided")
   0.025
   >>> get_alpha(0.95, "less")
   0.05


.. py:function:: get_bias_correction_factor_J(dof: int) -> numpy.float64

   Calculate the bias correction factor J for Hedges' g.

   .. math::

       J(x) = \frac{\Gamma\left(\frac{x}{2}\right)}{\sqrt{\frac{x}{2}}\Gamma\left(\frac{x-1}{2}\right)}

   :param dof: Degrees of freedom.
   :type dof: int

   :returns: The bias correction factor J.
   :rtype: np.float64

   .. rubric:: Examples

   >>> get_bias_correction_factor_J(10)
   0.92274560805
   >>> get_bias_correction_factor_J(20)
   0.96194453374


